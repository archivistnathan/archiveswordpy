# -*- coding: utf-8 -*-
"""ArchiveWordPy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j1bivYf2Qg3lvAE93bnfEYs1Bb00pLik
"""

import random

# Load word list into a list
with open('./wordlist.txt', 'r') as dict:
    words = [line.strip() for line in dict]

# Selects a random word from the list
answer = random.choice(words)
al = len(answer)
#print(answer) For debugging, uncomment if you want to know the word

# Define box colours using ANSI escape codes
def colourbox(letter, bg_colour):
  colours={
      "green": "\033[42m",
      "yellow": "\033[43m",
      "grey": "\033[100m",
      "white": "\033[37m",
      "reset": "\033[0m"
  }
  return f"{colours['white']}{colours[bg_colour]}{letter}{colours['reset']}"

# Welcome stuff
print('Welcome to ArchiveWordPy!')
print(f'Guess the {al}-letter archive term. You have {al+1} attempts.')

# Monitor attempts
for attempt in range(al+1):
  # Requests input, convert it to lowercase, and strips any characters that should not be there.
  guess =  input(f"Attempt {attempt+1}/{al+1}:").lower().strip()

  # Check if the guess is in the dctonary
  if guess not in words:
    print('Word not in the word list. Please try a different archives term.')

  # Check if the guess is the correct lenght
  if len(guess) < al:
    print('Your answer is shorter than the word. You might want to try an longer word next time.')

  if len(guess) > al:
    print('Your answer is longer than the word! I can\'t check this.')
    continue

  # Compare each letter of the guess to the answer by comparing the index and provide feedback
  feedback = []
  feedback.append("|")

  for i in range(al):
    char_display = guess[i] if i < len(guess) else ' ' # Define the letter inside the box
    if i < len(guess) and guess[i] == answer[i]:
      feedback.append(colourbox(char_display, "green")) # Add a green box to the feedback string to signify a correct letter in the correct location
    elif i < len(guess) and guess[i] in answer:
      feedback.append(colourbox(char_display, "yellow")) # Add a yellow box to the feedbach string to signify a correct letter in the wrong location
    else:
      feedback.append(colourbox(char_display if char_display != ' ' else ' ', "grey")) # Add a grey box to the feedback string to signify an incorrect letter
    feedback.append("|") # Add a spacer to make number of letters clearer

  # Convert feedback list to string and print
  print(''.join(feedback))

  if guess == answer:
    print('Congratulations! You\'ve guessed the term correctly!')
    break

else:
  print(f'Sorry, you\'ve run out of attempts! The term was \'{answer}\'.')

print(answer)